// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/task_manager/service/task_status_service.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTaskStatusService is a mock of TaskStatusService interface.
type MockTaskStatusService struct {
	ctrl     *gomock.Controller
	recorder *MockTaskStatusServiceMockRecorder
}

// MockTaskStatusServiceMockRecorder is the mock recorder for MockTaskStatusService.
type MockTaskStatusServiceMockRecorder struct {
	mock *MockTaskStatusService
}

// NewMockTaskStatusService creates a new mock instance.
func NewMockTaskStatusService(ctrl *gomock.Controller) *MockTaskStatusService {
	mock := &MockTaskStatusService{ctrl: ctrl}
	mock.recorder = &MockTaskStatusServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskStatusService) EXPECT() *MockTaskStatusServiceMockRecorder {
	return m.recorder
}

// CreateNewTask mocks base method.
func (m *MockTaskStatusService) CreateNewTask(username, filename string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewTask", username, filename)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewTask indicates an expected call of CreateNewTask.
func (mr *MockTaskStatusServiceMockRecorder) CreateNewTask(username, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewTask", reflect.TypeOf((*MockTaskStatusService)(nil).CreateNewTask), username, filename)
}

// GetAllTask mocks base method.
func (m *MockTaskStatusService) GetAllTask(username string) (map[string]map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTask", username)
	ret0, _ := ret[0].(map[string]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTask indicates an expected call of GetAllTask.
func (mr *MockTaskStatusServiceMockRecorder) GetAllTask(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTask", reflect.TypeOf((*MockTaskStatusService)(nil).GetAllTask), username)
}

// GetTaskStatus mocks base method.
func (m *MockTaskStatusService) GetTaskStatus(username, taskId string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskStatus", username, taskId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskStatus indicates an expected call of GetTaskStatus.
func (mr *MockTaskStatusServiceMockRecorder) GetTaskStatus(username, taskId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskStatus", reflect.TypeOf((*MockTaskStatusService)(nil).GetTaskStatus), username, taskId)
}

// UpdateTaskDownloadLink mocks base method.
func (m *MockTaskStatusService) UpdateTaskDownloadLink(taskId, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskDownloadLink", taskId, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskDownloadLink indicates an expected call of UpdateTaskDownloadLink.
func (mr *MockTaskStatusServiceMockRecorder) UpdateTaskDownloadLink(taskId, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskDownloadLink", reflect.TypeOf((*MockTaskStatusService)(nil).UpdateTaskDownloadLink), taskId, name)
}

// UpdateTaskStatus mocks base method.
func (m *MockTaskStatusService) UpdateTaskStatus(username, taskId string, status int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskStatus", username, taskId, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskStatus indicates an expected call of UpdateTaskStatus.
func (mr *MockTaskStatusServiceMockRecorder) UpdateTaskStatus(username, taskId, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskStatus", reflect.TypeOf((*MockTaskStatusService)(nil).UpdateTaskStatus), username, taskId, status)
}
