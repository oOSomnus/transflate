// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/task_manager/repository/user_repo.go

// Package mocks is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), username, password)
}

// DecreaseBalance mocks base method.
func (m *MockUserRepository) DecreaseBalance(username string, balance int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecreaseBalance", username, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecreaseBalance indicates an expected call of DecreaseBalance.
func (mr *MockUserRepositoryMockRecorder) DecreaseBalance(username, balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecreaseBalance", reflect.TypeOf((*MockUserRepository)(nil).DecreaseBalance), username, balance)
}

// FindUsrWithUsername mocks base method.
func (m *MockUserRepository) FindUsrWithUsername(username string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUsrWithUsername", username)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUsrWithUsername indicates an expected call of FindUsrWithUsername.
func (mr *MockUserRepositoryMockRecorder) FindUsrWithUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsrWithUsername", reflect.TypeOf((*MockUserRepository)(nil).FindUsrWithUsername), username)
}

// GetBalance mocks base method.
func (m *MockUserRepository) GetBalance(username string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", username)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockUserRepositoryMockRecorder) GetBalance(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockUserRepository)(nil).GetBalance), username)
}

// IfUserExists mocks base method.
func (m *MockUserRepository) IfUserExists(username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IfUserExists", username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IfUserExists indicates an expected call of IfUserExists.
func (mr *MockUserRepositoryMockRecorder) IfUserExists(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IfUserExists", reflect.TypeOf((*MockUserRepository)(nil).IfUserExists), username)
}
